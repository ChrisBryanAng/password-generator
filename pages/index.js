import { useState } from 'react';
import Head from 'next/head';
import { FaRegCopy, FaArrowRight } from 'react-icons/fa';
import ReactSlider from 'react-slider';
import Checkbox from '../components/Checkbox';
import StrengthIndicator from '../components/StrengthIndicator';

export default function Home() {
	const [characterLength, setCharacterLength] = useState(10);
	const [isWithUppercase, setIsWithUppercase] = useState(false);
	const [isWithLowercase, setIsWithLowercase] = useState(false);
	const [isWithNumbers, setIsWithNumbers] = useState(false);
	const [isWithSymbols, setIsWithSymbols] = useState(false);
	const [isNothingSelected, setIsNothingSelected] = useState(false);
	const [isCopied, setIsCopied] = useState(false);
	const [password, setPassword] = useState('');

	const generatePassword = () => {
		if (
			!isWithUppercase &&
			!isWithLowercase &&
			!isWithNumbers &&
			!isWithSymbols
		) {
			setIsNothingSelected(true);
		} else {
			let randomPassword = '';
			for (let i = 0; i < characterLength; i++) {
				let randomChoice = random(0, 3);
				if (isWithLowercase && randomChoice === 0) {
					randomPassword += randomLowerCase();
				} else if (isWithUppercase && randomChoice === 1) {
					randomPassword += randomUpperCase();
				} else if (isWithSymbols && randomChoice === 2) {
					randomPassword += randomSymbol();
				} else if (isWithNumbers && randomChoice === 3) {
					randomPassword += random(0, 9);
				} else {
					i--;
				}
			}

			setIsNothingSelected(false);
			setPassword(randomPassword);
			setIsCopied(false);
		}
	};

	const random = (min = 0, max = 1) => {
		return Math.floor(Math.random() * (max + 1 - min) + min);
	};

	const randomLowerCase = () => {
		return String.fromCharCode(random(97, 122));
	};

	const randomUpperCase = () => {
		return String.fromCharCode(random(65, 90));
	};

	const randomSymbol = () => {
		const symbols = "~*$%@#^&!?*'-=/,.{}()[]<>";
		return symbols[random(0, symbols.length - 1)];
	};

	const copyToClipboard = () => {
		if (password !== '') {
			navigator.clipboard.writeText(password);
			setIsCopied(true);
		}
	};

	return (
		<div className='h-screen w-screen font-jetBrains font-bold'>
			<Head>
				<title>Password Generator</title>
				<meta
					name='Password Generator'
					content='Generated by create next app'
				/>
				<link rel='icon' href='/favicon.ico' />
			</Head>

			<main className='flex flex-col gap-4 justify-center items-center h-full w-full bg-veryDarkGrey text-almostWhite text-[16px]'>
				<p className='text-grey w-[343px] md:w-[540px] text-center text-[18px]'>
					Password Generator
				</p>
				<div className='flex items-center justify-between bg-darkGrey px-6 py-4 w-[343px] md:w-[540px]'>
					<input
						type='text'
						readOnly
						value={password}
						onChange={(e) => setPassword(e.target.value)}
						placeholder='P4$5W0rD!'
						className='w-full text-[24px] focus:outline-none bg-transparent'
					/>
					{isCopied && <p className='mr-3 text-neonGreen'>COPIED</p>}
					<FaRegCopy
						className='h-5 w-5 text-neonGreen hover:text-almostWhite cursor-pointer'
						onClick={copyToClipboard}
					/>
				</div>
				<div className='flex flex-col justify-center gap-5 bg-darkGrey p-6 w-[343px] md:w-[540px]'>
					<div className='flex items-center justify-between'>
						<p>Character Length</p>
						<p className='text-neonGreen text-[24px]'>{characterLength}</p>
					</div>
					<div className='h-4'>
						<ReactSlider
							className='customSlider'
							trackClassName='customSlider-track'
							thumbClassName='customSlider-thumb'
							max={20}
							defaultValue={10}
							value={characterLength}
							onChange={(value) => setCharacterLength(value)}
						/>
					</div>
					<div className='flex flex-col gap-2 mt-2'>
						<Checkbox
							label='Include Uppercase Letters'
							checked={isWithUppercase}
							onChange={setIsWithUppercase}
						/>
						<Checkbox
							label='Include Lowercase Letters'
							checked={isWithLowercase}
							onChange={setIsWithLowercase}
						/>
						<Checkbox
							label='Include Numbers'
							checked={isWithNumbers}
							onChange={setIsWithNumbers}
						/>
						<Checkbox
							label='Include Symbols'
							checked={isWithSymbols}
							onChange={setIsWithSymbols}
						/>
					</div>
					<div className='flex items-center justify-between px-8 py-4 h-14 w-full bg-veryDarkGrey'>
						<p className='text-grey'>STRENGTH</p>
						<div className='flex items-center gap-2'>
							<StrengthIndicator password={password} />
						</div>
					</div>
					{characterLength < 1 && (
						<p className='text-red'>Character Length must atleast be 1.</p>
					)}
					{isNothingSelected && (
						<p className='text-red'>At least 1 option should be checked.</p>
					)}
					<button
						type='button'
						disabled={characterLength < 1 ? true : false}
						onClick={generatePassword}
						className='flex items-center justify-center gap-4 p-4 h-14 text-darkGrey bg-neonGreen uppercase hover:bg-darkGrey hover:text-neonGreen hover:border-2 hover:border-neonGreen transition-colors duration-300'
					>
						Generate
						<FaArrowRight className='h-3 w-3' />
					</button>
				</div>
			</main>
		</div>
	);
}
